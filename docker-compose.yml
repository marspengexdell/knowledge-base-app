version: '3.8'
# Docker Compose配置 - 最终优化版
# 移除了已过时的 'version' 标签

services:

  # Nginx: 统一的流量入口和反向代理
  nginx:
    image: nginx:1.25.4-alpine
    container_name: knowledge-base-app-nginx
    restart: always
    ports:
      # 在本地测试时，只暴露80端口
      - "80:80"
      # 当你需要部署到公网并启用HTTPS时，再取消下面这行的注释
      # - "443:443"
    volumes:
      # 挂载Nginx配置文件
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      # 为将来启用HTTPS预留的证书挂载点 (本地测试时这些目录可以是空的)
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
    networks:
      - app-network
    depends_on:
      - backend
      - frontend-user
      - frontend-admin

  # 后端服务: 处理业务逻辑和API
  backend:
    build:
      context: ./modules/backend
    container_name: knowledge-base-app-backend
    restart: always
    dns: # <-- 修正: 添加DNS，解决网络访问问题
      - 8.8.8.8
      - 1.1.1.1
    volumes:
      # 只挂载应用代码，而不是整个目录，用于开发热更新
      - ./modules/backend/app:/app/app
      # 允许后端写入(rw)模型，用于上传
      - ./models:/models:rw
      - ./knowledge_base_docs:/app/app/knowledge_base_docs
    environment:
      - GRPC_SERVER_ADDRESS=inference:50051
      - VECTOR_DB_HOST=vector-db
      - VECTOR_DB_PORT=8000
    depends_on:
      - vector-db
      - inference
    networks:
      - app-network

  # 推理服务: 运行AI模型
  inference:
    build:
      context: ./modules/inference
    container_name: knowledge-base-app-inference
    restart: always
    dns: # <-- 修正: 添加DNS，解决模型下载问题
      - 8.8.8.8
      - 1.1.1.1
    volumes:
      # 推理服务只需要读取(ro)模型
      - ./models:/models:ro
    deploy: # <-- 优化: 统一使用 deploy 方式配置GPU资源
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    shm_size: '2gb' # 共享内存大小，对某些模型很重要
    networks:
      - app-network
    # healthcheck 保持不变，是个好习惯

  # 用户前端
  frontend-user:
    build:
      context: ./frontend-user # 修正: 你的目录名是 frontend-user
    container_name: knowledge-base-app-frontend-user
    restart: always
    # 在Nginx模式下，不再需要直接暴露端口
    networks:
      - app-network

  # 管理员前端
  frontend-admin:
    build:
      context: ./frontend-admin
    container_name: knowledge-base-app-frontend-admin
    restart: always
    # 在Nginx模式下，不再需要直接暴露端口
    networks:
      - app-network

  # 向量数据库
  vector-db:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: knowledge-base-app-vector-db
    restart: always
    ports:
      # 将数据库端口映射到 8001，避免和后端可能的端口冲突
      - "8001:8000"
    volumes:
      - chroma-data:/data
    networks:
      - app-network

# 定义一个全局网络，让所有服务都在同一个局域网内
networks:
  app-network:
    driver: bridge

# 定义一个持久化数据卷，用于存储ChromaDB的数据
volumes:
  chroma-data: