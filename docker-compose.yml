version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      # 这里不用挂载模型，因为 backend 不直接用模型，但可以保留下面一行同步卷（非必须）
      - models_data:/app/models
    environment:
      - INFERENCE_SERVER_URL=inference:50051
      - VECTOR_DB_URL=http://vector-db:8000
    depends_on:
      - vector-db
      - inference
    networks:
      - knowledge-net
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 20s
      timeout: 5s
      retries: 5

  inference:
    build:
      context: ./inference
      dockerfile: Dockerfile
    container_name: inference
    volumes:
      - models_data:/app/models     # 重点修正：容器路径一定要 /app/models
    networks:
      - knowledge-net
    healthcheck:
      test: ["CMD", "ls", "/app/models"]    # 这里也要用/app/models
      interval: 30s
      timeout: 5s
      retries: 3

  vector-db:
    image: chromadb/chroma:0.4.24
    container_name: vector-db
    ports:
      - "8001:8000"
    volumes:
      - vector_db_data:/chroma/chroma
    networks:
      - knowledge-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 5s
      retries: 5

  frontend-admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile
    container_name: frontend-admin
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - knowledge-net

  frontend-user:
    build:
      context: ./frontend-user
      dockerfile: Dockerfile
    container_name: frontend-user
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - knowledge-net

volumes:
  vector_db_data:
  models_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './models'         # 只要你本地是 E:\knowledge-base-app\models 就不用改

networks:
  knowledge-net:
    driver: bridge
