# Docker Compose配置 - 最终优化版
# 移除了已过时的 'version' 标签，并对服务配置进行了加固和统一

services:

  # Nginx: 统一的流量入口和反向代理
  nginx:
    image: nginx:1.25.4-alpine
    container_name: knowledge-base-app-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      # - "443:443" # 为HTTPS预留
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # 配置文件以只读方式挂载，更安全
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
    networks:
      - app-network
    depends_on:
      - backend
      - frontend-user
      - frontend-admin

  # 后端服务: 处理业务逻辑和API
  backend:
    build:
      context: ./modules/backend
      dockerfile: Dockerfile
    container_name: knowledge-base-app-backend
    volumes:
      - ./modules/backend/app:/app
    ports:
      - "8000:8000"
    networks:
      - my_network
    restart: always

  # 推理服务: 运行AI模型
  inference:
    build:
      context: ./modules/inference
    container_name: knowledge-base-app-inference
    restart: unless-stopped
    volumes:
      # 核心修正: 推理服务从与后端相同的模型存储目录中读取模型
      - ./model_storage:/models:ro # 容器内的路径是 /models，与推理服务的代码逻辑匹配
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    shm_size: '2gb'
    networks:
      - app-network
    healthcheck: # 优化: 添加健康检查
      # 这里假设推理服务在某个端口提供了一个健康检查端点，例如 50051
      # 如果没有，可以检查一个总是存在的文件
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 用户前端
  frontend-user:
    build:
      context: ./frontend-user
    container_name: knowledge-base-app-frontend-user
    restart: unless-stopped
    networks:
      - app-network

  # 管理员前端
  frontend-admin:
    build:
      context: ./frontend-admin
    container_name: knowledge-base-app-frontend-admin
    restart: unless-stopped
    networks:
      - app-network

  # 向量数据库
  vector-db:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: knowledge-base-app-vector-db
    restart: unless-stopped
    ports:
      # 优化: 将端口映射到不常用的8001，避免冲突
      - "8001:8000"
    volumes:
      - chroma-data:/chroma # 明确指定挂载点
    networks:
      - app-network

# 定义一个全局网络，让所有服务都在同一个局域网内
networks:
  app-network:
    driver: bridge
  my_network:
    driver: bridge

# 定义一个持久化数据卷，用于存储ChromaDB的数据
volumes:
  chroma-data:

